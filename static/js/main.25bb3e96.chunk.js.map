{"version":3,"sources":["components/Movies/Movies.js","components/Series/Series.js","components/Header/Header.js","components/Footer/Footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["movies","movieItems","collator","Intl","Collator","numeric","sensitivity","newMovieItems","sort","a","b","compare","title","className","slice","map","item","idx","key","src","images","url","alt","height","width","series","seriesItems","newSeriesItems","header","props","to","onClick","handleLinkClick","currentSubtitle","footer","href","target","rel","App","useState","loading","error","setItem","subtitle","sub","setSub","useEffect","fetch","then","response","json","data","movieBlocks","seriesBlocks","entries","forEach","i","programType","releaseYear","push","catch","type","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"yUAgCeA,G,MA7BA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACVC,EAAW,IAAIC,KAAKC,SAAS,KAAM,CACvCC,SAAS,EACTC,YAAa,SAGTC,EAAgBN,EAAWO,MAAK,SAACC,EAAGC,GAAJ,OACpCR,EAASS,QAAQF,EAAEG,MAAOF,EAAEE,UAG9B,OACE,yBAAKC,UAAU,mBACZN,EAAcO,MAAM,EAAG,IAAIC,KAAI,SAACC,EAAMC,GACrC,OACE,yBAAKJ,UAAU,QAAQK,IAAKD,GAC1B,yBACEE,IAAKH,EAAKI,OAAO,cAAcC,IAC/BC,IAAI,QACJC,OAAO,QACPC,MAAM,UAER,uBAAGX,UAAU,eAAeG,EAAKJ,cCQ9Ba,G,MA7BA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACVxB,EAAW,IAAIC,KAAKC,SAAS,KAAM,CACvCC,SAAS,EACTC,YAAa,SAGTqB,EAAiBD,EAAYlB,MAAK,SAACC,EAAGC,GAAJ,OACtCR,EAASS,QAAQF,EAAEG,MAAOF,EAAEE,UAG9B,OACE,yBAAKC,UAAU,oBACZc,EAAeb,MAAM,EAAG,IAAIC,KAAI,SAACC,EAAMC,GACtC,OACE,yBAAKJ,UAAU,SAASK,IAAKD,GAC3B,yBACEE,IAAKH,EAAKI,OAAO,cAAcC,IAC/BC,IAAI,SACJC,OAAO,QACPC,MAAM,UAER,uBAAGX,UAAU,gBAAgBG,EAAKJ,cCC/BgB,G,MArBA,SAACC,GACd,OACE,6BACE,yBAAKhB,UAAU,OACb,kBAAC,IAAD,CAAMiB,GAAG,IAAIC,QAAS,kBAAMF,EAAMG,gBAAgB,YAChD,+CAEF,yBAAKnB,UAAU,aACb,kBAAC,IAAD,CAAMiB,GAAG,KAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,IAAIjB,UAAU,cAAvB,2BAKJ,yBAAKA,UAAU,WACb,uCAAagB,EAAMI,qBCkCZC,G,MAlDA,WACb,OACE,yBAAKrB,UAAU,UACb,4BACE,wBAAIA,UAAU,aAAd,QACA,oDACA,8CACA,oDACA,oCACA,+CAEF,6BACE,qFAEF,4BACE,wBAAIA,UAAU,gBACZ,uBACEsB,KAAK,0CACLtB,UAAU,iBACVuB,OAAO,SACPC,IAAI,uBAEJ,iDAGJ,wBAAIxB,UAAU,gBACZ,uBACEA,UAAU,gBACVsB,KAAK,4BACLC,OAAO,SACPC,IAAI,uBAEJ,gDAGJ,wBAAIxB,UAAU,gBACZ,uBACEsB,KAAK,mCACLtB,UAAU,kBACVuB,OAAO,SACPC,IAAI,uBAEJ,sDCuDGC,G,MA5FH,WAAO,IAAD,EACQC,mBAAS,CAC/BvC,OAAQ,GACRyB,OAAQ,GACRe,SAAS,EACTC,OAAO,IALO,mBACTzB,EADS,KACH0B,EADG,OAOMH,mBAAS,CAC7BI,SAAU,WARI,mBAOTC,EAPS,KAOJC,EAPI,KAYhBC,qBAAU,WACRC,MACE,6FAECC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,IAEIC,EAAc,GACdC,EAAe,GASnB,OAXmBF,EAGFG,QAAQC,SAAQ,SAACC,GACV,UAAlBA,EAAEC,aAA2BD,EAAEE,aAAe,MAChDN,EAAYO,KAAKH,GAEG,WAAlBA,EAAEC,aAA4BD,EAAEE,aAAe,MACjDL,EAAaM,KAAKH,MAGfd,EAAQ,CACb1C,OAAO,GAAD,OAAMoD,GACZ3B,OAAO,GAAD,OAAM4B,GACZb,SAAS,OAGZoB,OAAM,SAACnB,GACNC,EAAQ,CACND,OAAO,SAGZ,IAEH,IAAMT,EAAkB,SAAC6B,GACvBhB,EAAO,CACLF,SAAUkB,KAId,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,CACEoB,gBAAiBW,EAAID,SACrBX,gBAAiBA,IAEjBhB,EAAKwB,SAAYxB,EAAKyB,MA4BtB,4BAAKzB,EAAKwB,QAAU,aAAe,wBA3BnC,yBAAK3B,UAAU,WACb,kBAAC,IAAD,CACEiD,KAAK,UACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAQ9D,WAAYe,EAAKhB,YAEzC,kBAAC,IAAD,CACE8D,KAAK,UACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAQrC,YAAaV,EAAKS,YAE1C,yBAAKZ,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,QACViB,GAAG,UACHC,QAAS,kBAAMC,EAAgB,YAHjC,UAOA,kBAAC,IAAD,CACEnB,UAAU,QACViB,GAAG,UACHC,QAAS,kBAAMC,EAAgB,YAHjC,YAYN,kBAAC,EAAD,SCnFcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdjB,OAAM,SAAAnB,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.25bb3e96.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Movies.css\";\n\nconst movies = ({ movieItems }) => {\n  const collator = new Intl.Collator(\"en\", {\n    numeric: true,\n    sensitivity: \"base\",\n  });\n\n  const newMovieItems = movieItems.sort((a, b) =>\n    collator.compare(a.title, b.title)\n  );\n\n  return (\n    <div className=\"movie-container\">\n      {newMovieItems.slice(0, 21).map((item, idx) => {\n        return (\n          <div className=\"movie\" key={idx}>\n            <img\n              src={item.images[\"Poster Art\"].url}\n              alt=\"movie\"\n              height=\"200px\"\n              width=\"150px\"\n            />\n            <p className=\"movie-title\">{item.title}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default movies;\n","import React from \"react\";\nimport \"./Series.css\";\n\nconst series = ({ seriesItems }) => {\n  const collator = new Intl.Collator(\"en\", {\n    numeric: true,\n    sensitivity: \"base\",\n  });\n\n  const newSeriesItems = seriesItems.sort((a, b) =>\n    collator.compare(a.title, b.title)\n  );\n\n  return (\n    <div className=\"series-container\">\n      {newSeriesItems.slice(0, 21).map((item, idx) => {\n        return (\n          <div className=\"series\" key={idx}>\n            <img\n              src={item.images[\"Poster Art\"].url}\n              alt=\"series\"\n              height=\"200px\"\n              width=\"150px\"\n            />\n            <p className=\"series-title\">{item.title}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default series;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Header.css\";\n\nconst header = (props) => {\n  return (\n    <div>\n      <nav className=\"nav\">\n        <Link to=\"/\" onClick={() => props.handleLinkClick(\"Titles\")}>\n          <h1>DEMO Streaming</h1>\n        </Link>\n        <div className=\"right-nav\">\n          <Link to=\"/\">Log in</Link>\n          <Link to=\"/\" className=\"free-trial\">\n            Start your free trial\n          </Link>\n        </div>\n      </nav>\n      <nav className=\"sub-nav\">\n        <h1>Popular {props.currentSubtitle}</h1>\n      </nav>\n    </div>\n  );\n};\n\nexport default header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst footer = () => {\n  return (\n    <div className=\"footer\">\n      <ul>\n        <li className=\"home-item\">Home</li>\n        <li>Terms and Conditions</li>\n        <li>Privacy Policy</li>\n        <li>Collection Statement</li>\n        <li>Help</li>\n        <li>Manage Account</li>\n      </ul>\n      <div>\n        <p>Copyright &#169; 2020 Adam Zebolsky All Rights Reserved</p>\n      </div>\n      <ul>\n        <li className=\"social-icons\">\n          <a\n            href=\"https://www.facebook.com/adam.zebolsky/\"\n            className=\"fa fa-facebook\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <span>facebook link</span>\n          </a>\n        </li>\n        <li className=\"social-icons\">\n          <a\n            className=\"fa fa-twitter\"\n            href=\"https://www.instagram.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <span>twitter link</span>\n          </a>\n        </li>\n        <li className=\"social-icons\">\n          <a\n            href=\"https://twitter.com/AdamZebolsky\"\n            className=\"fa fa-instagram\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <span>instagram link</span>\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default footer;\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport Movies from \"../components/Movies/Movies\";\nimport Series from \"../components/Series/Series\";\nimport Header from \"../components/Header/Header\";\nimport Footer from \"../components/Footer/Footer\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [item, setItem] = useState({\n    movies: [],\n    series: [],\n    loading: true,\n    error: false,\n  });\n  const [sub, setSub] = useState({\n    subtitle: \"Titles\",\n  });\n\n  // fetch json data using useEffect with an empty array as the second arg so this only runs once\n  useEffect(() => {\n    fetch(\n      \"https://raw.githubusercontent.com/StreamCo/react-coding-challenge/master/feed/sample.json\"\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        let movieSeriesItems;\n        movieSeriesItems = data;\n        let movieBlocks = [];\n        let seriesBlocks = [];\n        movieSeriesItems.entries.forEach((i) => {\n          if (i.programType === \"movie\" && i.releaseYear >= 2010) {\n            movieBlocks.push(i);\n          }\n          if (i.programType === \"series\" && i.releaseYear >= 2010) {\n            seriesBlocks.push(i);\n          }\n        });\n        return setItem({\n          movies: [...movieBlocks],\n          series: [...seriesBlocks],\n          loading: false,\n        });\n      })\n      .catch((error) => {\n        setItem({\n          error: true,\n        });\n      });\n  }, []);\n\n  const handleLinkClick = (type) => {\n    setSub({\n      subtitle: type,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Header\n        currentSubtitle={sub.subtitle}\n        handleLinkClick={handleLinkClick}\n      />\n      {!item.loading || !item.error ? (\n        <div className=\"content\">\n          <Route\n            path=\"/movies\"\n            render={() => <Movies movieItems={item.movies} />}\n          />\n          <Route\n            path=\"/series\"\n            render={() => <Series seriesItems={item.series} />}\n          />\n          <div className=\"home\">\n            <Link\n              className=\"links\"\n              to=\"/series\"\n              onClick={() => handleLinkClick(\"Series\")}\n            >\n              Series\n            </Link>\n            <Link\n              className=\"links\"\n              to=\"/movies\"\n              onClick={() => handleLinkClick(\"Movies\")}\n            >\n              Movies\n            </Link>\n          </div>\n        </div>\n      ) : (\n        <h1>{item.loading ? \"...loading\" : \"Something went wrong\"}</h1>\n      )}\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}